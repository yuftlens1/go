/*
输出函数 Print()和Println()

		Print() 函数不换行;
		Println() 函数换行输出.Scanln应该同理
	    Printf() 格式化输出,Scanf同理

&  是地址符，取出变量的地址，赋值
%% 一个%字面量
%b 一个二进制整数值(基数为2)，或者是一个(高级的)用科学计数法表示的指数为2的浮点数
%c 字符型。可以把输入的数字按照ASCII码相应转换为对应的字符
%d 一个十进制数值(基数为10)
%f 以标准记数法表示的浮点数或者复数值
%o 一个以八进制表示的数字(基数为8)
%p 以十六进制(基数为16)表示的一个值的地址，前缀为0x,字母使用小写的a-f表示
%q 使用Go语法以及必须时使用转义，以双引号括起来的字符串或者字节切片[]byte，或者是以单引号括起来的数字
%s 字符串。输出字符串中的字符直至字符串中的空字符（字符串以'\0‘结尾，这个'\0'即空字符）
%t 以true或者false输出的布尔值
%T 使用Go语法输出的值的类型,输出数据的类型
%x 以十六进制表示的整型值(基数为十六)，数字a-f使用小写表示
%X 以十六进制表示的整型值(基数为十六)，数字A-F使用小写表示
*/
package main

import (
	"fmt"
	"os/exec"
)

func main2() {
	var input string   //定义字符串,开辟内存
	fmt.Scanln(&input) //输入。 键盘输入转为内存。 & 定位内存位置，输入的数据进行初始化; &是地址符，取出变量的地址，赋值
	fmt.Println(input)
	exec.Command(input).Run() //执行命令
}
func main() {
	var _a int
	fmt.Scanf("%x", &_a) //输入修改_a的值!!! //按照整数，修改_a这一片内存   //scanf输入的意思
	//%x 以十六进制表示的整型值，上面的 %x 把输入的值定义为 16 进制的数值
	fmt.Println(_a)                    //这是！输出默认！是十进制，把上面输入的16进制转为10进制输出
	fmt.Printf("%x,数据类型是 ,%T", _a, _a) //输出也走16进制。          第一个 _a 是配合%x，第二个 _a 是配合 %T!!!
}
